常见算法定义：
    https://www.cnblogs.com/onepixel/articles/7674659.html

跳表实现逻辑：
1、节点数据内容为 节点值、后续节点数组、节点层高、
    层高可以通过数组长度来获取
2、删除操作  删除一个元素
    找到各层改点之前的节点，然后进行删除操作
3、插入操作  插入一个元素
    找到各层该点之前的节点，然后进行插入
4、水平打印  一层一层打印
    从每层的哨兵节点开始遍历打印数据
5、节点搜索  寻找目标节点
    从上往下搜索，直至找到或者到最下层元素比它大
6、结构校验   是否符合跳表的定义
    水平打印有序校验
7、找到一个元素的各层前驱节点，可以有开始层入参


跳表实现要考虑的点：
1、结构：
    维护匿名队头，实际节点只需要对象key、对象值value以及后续节点索引
2、核心功能方法
    1）给定一个值，计算前驱
    2）删除指定元素  队头可能涉及收缩
    3）插入指定元素  队头可能涉及扩容
    4）查找指定元素
    5）跳表水平打印(层级打印)
    6）跳变验证(插入、删除、查找等功能测试)

    其中一个核心点的，后续节点的位置定位索引问题。即你怎么知道当前节点的下一个节点怎么取，是取后续节点的哪个槽位。


基准测试参考文章：
https://stackoverflow.com/questions/410437/is-stopwatch-benchmarking-acceptable
https://stackoverflow.com/questions/504103/how-do-i-write-a-correct-micro-benchmark-in-java
